# Вася недавно изучил полярную систему координат. А именно, он изучил понятие полярного прямоугольника.
# Пусть задана стандартная декартова плоскость. Если на ней нарисовать две окружности с центром
# в начале координат, то область, находящаяся между ними, называется кольцом (на рисунке обозначена синим).
# Если на ней нарисовать два луча, то область, заметаемая первым лучом при движении ко второму,
# называется углом (т.е. область между этими двумя лучами, на рисунке обозначена зеленым).
# Полярным прямоугольником называется пересечение некоторого угла с некоторым кольцом
# (на рисунке обозначено красным).
# Задано несколько полярных прямоугольников. Найдите площадь их пересечения. Помните, что пересечение
# полярных прямоугольников может состоять из нескольких частей!
# Формат ввода
# В первой строке вводится целое число N — количество прямоугольников (1 ≤ N ≤ 100 000).
# Далее в N строках содержится описание прямоугольников. Каждый прямоугольник описывается четверкой
# действительных чисел r1, r2, φ1, φ2, где r1, r2 обозначают радиусы окружностей, образующих кольцо
# (r1 < r2), а φ1, φ2 обозначают углы, образованные первым и вторым лучами с осью абсцисс,
# заданные в радианах. При этом заметается область от первого луча до второго в направлении против
# часовой стрелки (т.е. возрастания углов), даже в случае, когда φ1 > φ2. Все числа заданы
# максимум с шестью знаками после десятичной точки. Углы лежат в полуинтервале [0, 2π),
# а радиусы не превосходят 106. Гарантируется, что φ1 ≠ φ2.
# Формат вывода
# Выведите единственное число — площадь искомого пересечения. Ответ будет считаться правильным,
# если его абсолютная или относительная погрешность не будет превышать 10-6.

from math import pi

n = int(input())
events = []
r1_max, r2_min = 0, 10000000
for i in range(1, n + 1):
    r1, r2, f1, f2 = map(float, input().split())
    events.append((f1, -i))
    events.append((f2, i))
    r1_max = max(r1_max, r1)
    r2_min = min(r2_min, r2)
events.sort()
cntsegs = 0
started = set()
for event in events:
    if event[1] < 0:
        cntsegs += 1
        started.add(-event[1])
    elif event[1] in started:
        cntsegs -= 1

ans = 0
for i in range(2 * n):
    event = events[i]
    if event[1] < 0:
        cntsegs += 1
    else:
        cntsegs -= 1
    if cntsegs == n:
        if i < 2 * n - 1:
            ans += (events[i + 1][0] - event[0]) * (r2_min ** 2 - r1_max ** 2) / 2
        else:
            ans += (events[0][0] - event[0] + 2 * pi) * (r2_min ** 2 - r1_max ** 2) / 2
print(ans)

