# На клеточном поле, размером NxM (2 ≤ N, M ≤ 250) сидит Q (0 ≤ Q ≤ 10000) блох в различных клетках.
# "Прием пищи" блохами возможен только в кормушке - одна из клеток поля, заранее известная. Блохи
# перемещаются по полю странным образом, а именно, прыжками, совпадающими с ходом обыкновенного
# шахматного коня. Длина пути каждой блохи до кормушки определяется как количество прыжков.
# Определить минимальное значение суммы длин путей блох до кормушки или, если собраться блохам у
# кормушки невозможно, то сообщить об этом. Сбор невозможен, если хотя бы одна из блох не может
# попасть к кормушке.
# Формат ввода
# В первой строке входного файла находится 5 чисел, разделенных пробелом: N, M, S, T, Q. N, M -
# размеры доски (отсчет начинается с 1); S, T - координаты клетки - кормушки (номер строки и столбца
# соответственно), Q - количество блох на доске. И далее Q строк по два числа - координаты каждой
# блохи.
# Формат вывода
# Содержит одно число - минимальное значение суммы длин путей или -1, если сбор невозможен.
# Пример 1
# Ввод	      Вывод
# 2 2 1 1 1     -1
# 2 2
# Пример 2
# Ввод	      Вывод
# 4 4 1 1 16    42
# 1 1
# 1 2
# 1 3
# 1 4
# 2 1
# 2 2
# 2 3
# 2 4
# 3 1
# 3 2
# 3 3
# 3 4
# 4 1
# 4 2
# 4 3
# 4 4


from collections import deque

n, m, s, t, q = map(int, input().split())
table = [[-1] * (m + 3) for _ in range(n + 3)]
for i in range(n + 3):
    table[i][0], table[i][-2], table[i][-1] = -2, -2, -2
for j in range(m + 3):
    table[0][j], table[-2][j], table[-1][j] = -2, -2, -2


def bfs(x, y):
    deque_ = deque()
    step = 0
    table[x][y] = step
    deque_.append((x, y, step))
    dx = [2, 2, 1, 1, -1, -1, -2, -2]
    dy = [1, -1, 2, -2, 2, -2, 1, -1]
    while deque_:
        cur_x, cur_y, cur_step = deque_.popleft()
        step = cur_step + 1
        for i in range(8):
            x = cur_x + dx[i]
            y = cur_y + dy[i]
            if table[x][y] == -1:
               table[x][y] = step
               deque_.append((x, y, step))

bfs(s, t)
res = 0
for _ in range(q):
    x, y = map(int, input().split())
    temp = table[x][y]
    if temp == -1:
        res = -1
        break
    else:
        res += temp
print(res)
